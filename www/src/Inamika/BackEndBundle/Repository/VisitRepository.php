<?php

namespace Inamika\BackEndBundle\Repository;

/**
 * VisitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VisitRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAll(){
        return $this->createQueryBuilder('e')
        ->select('e')
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->orderBy("e.id","DESC");
    }

    public function search($query=null,$limit=0,$offset=0,$sort=null,$direction=null){
        if($limit>100) $limit=100;
        if($limit==0) $limit=30;
        $qb= $this->getAll()
        ->setFirstResult($offset)
        ->setMaxResults($limit)
        ->orderBy("e.id","DESC");
        if($sort){
            if(strpos($sort, ".") === false)
                $sort='e.'.$sort;
            $qb->orderBy($sort,$direction);
        }
        if($query)
            // $qb->andWhere('e.title LIKE :query')->setParameter('query',"%".$query."%");
        return $qb;
    }

    public function searchTotal($query=null,$limit=0,$offset=0){
        $resultTotal=$this->search($query,$limit=0,$offset=0)
        ->setFirstResult(null)
        ->select('COUNT(e.id) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }
   
    public function total(){
        $resultTotal=$this->search()
        ->setFirstResult(null)
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->select('COUNT(e.id) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }

    public function getTotalByYear($year){
        $totals = $this->createQueryBuilder('e')
        ->select('COUNT(e) AS value,MONTH(e.createdAt) as month')
        ->where('e.isDelete = :isDelete')
        ->andWhere('YEAR(e.createdAt)=:year')
        ->setParameter('year',$year)
        ->setParameter('isDelete',false)
        ->groupBy("month")->getQuery()->getResult();
        foreach($totals as $key => $total){
            $dt = \DateTime::createFromFormat('!m', $total["month"]);
            $totals[$key]["month_label"]=strtoupper($dt->format('F'));
        }
        return $totals;
    }
    
    public function getDistinctYear(){
        return $this->createQueryBuilder('e')
        ->select('DISTINCT(YEAR(e.createdAt)) year')
        ->where('e.isDelete = :isDelete')
        ->orderBy('year','DESC')
        ->setParameter('isDelete',false)->getQuery()->getResult();
        
    }
}
