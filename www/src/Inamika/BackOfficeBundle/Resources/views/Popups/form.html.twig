{% set pathBase='inamika_backoffice_popups' %} 
{% extends "InamikaBackOfficeBundle::layout.html.twig" %}
{% block body %} 
{{ parent()}}   
{{ render(controller('Inamika\\BackOfficeBundle\\Controller\\PopupsController::form',{ entity: entity})) }}  
{% endblock body %}
{% block javascripts %} 
{{ parent() }}
{% include 'InamikaBackOfficeBundle:_partials:dropifyScripts.html.twig' %}
<script>
    var notes=[];
    $(function (){
        {% if entity is defined %}
            {% for note in entity.notes %}
                notes.push({
                    'id':'{{ note.id}}',
                    'name':'{{ note.name}}',
                    'picture':'{{ note.picture}}',
                    'description':`{{ note.description}}`,
                    'isDelete':'{{ note.isDelete}}'
                });
            {% endfor %}
            renderNotes();
        {% endif %}
    });

    function beforeSuccess(){
        location.href="{{ path(pathBase) }}";
    }
    function cancell(){
        location.href='{{ path(pathBase) }}';
    }
    function add(){
        notes.push({
            id   : '',
            name : '',
            description : '',
            picture : '',
            isDelete : ''
        });
        renderNotes();
    }
    function remove(i){
        notes[i].isDelete=1;
        renderNotes();
    }
    
    function press(i){
        notes[i].name=$("#"+i+"_input").val();
        notes[i].description=$("#"+i+"_description").val();
        notes[i].picture=$("#"+i+"_picture").val();
    }

    function renderNotes(){
        $("#notes").html('');
        for (let i = 0; i < notes.length; i++) {
            if(!notes[i].isDelete){
                let pictureDefault=(notes[i].picture)?'data-default-file="'+notes[i].picture+'"':'';
                $("#notes").append(`
                <tr>
                    <td>
                        <div class="form-group">
                            <input type="text" id="${i}_input" placeholder="{{ 'TITLE' | trans }}" onkeyup="press(${i})" class="form-control" value="${notes[i].name}">
                        </div>
                        <div class="form-group" style="height:0px;">
                            <input type="text" id="${i}_picture" placeholder="{{ 'PICTURE' | trans }}" onkeyup="press(${i})" class="form-control" value="${notes[i].picture}">
                        </div>
                        <div class="form-group">
                            <input type="file" ${pictureDefault} data-max-file-size="4M" data-allowed-file-extensions="png jpg jpeg" placeholder="{{ 'PICTURE' | trans }}" onkeyup="press(${i})" class="form-control dropify" onchange="encodeImageFileAsURLCustom('${i}',this)" >
                        </div>
                        <div class="form-group">
                            <textarea id="${i}_description" placeholder="{{ 'DESCRIPTION' | trans }}" onkeyup="press(${i})" class="form-control">${notes[i].description}</textarea>
                        </div>
                    </td>
                    <td class="text-center align-middle">
                        <button data-toggle="tooltip" data-placement="top" title="Eliminar" type="button" onclick="remove(${i})" class="btn-remove btn btn-outline-danger btn-circle"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>`);
                $('.dropify').dropify({
                    messages: {
                        'default': '{{ 'DRAG_AND_DROP_FILE' | trans }}',
                        'replace': '{{ 'DRAG_AND_DROP_OR_REPLACE' | trans }}',
                        'remove':  '{{ 'DELETE' | trans }}',
                        'error':   '{{ 'ERROR' | trans }}'
                    },
                    error: {
                        'fileSize': '{{ 'FILE_VERY_LONG' | trans }}',
                        'imageFormat': '{{ 'FILE_format' | trans }}'
                    }
                });
                $('.dropify-clear').remove();
            }
        }
    }

    function encodeImageFileAsURLCustom(i,element) {
        var file = element.files[0];
        file.base64="";
        var reader = new FileReader();
        reader.onloadend = function() {
            file.base64=reader.result;  
            $.ajax({
                url: '{{ path('api_utils_uploadImage') }}',
                type: 'POST',
                data:JSON.stringify({base64: reader.result}),
                crossDomain: true,
                success: function(data) {
                    $("#"+i+"_picture").val(data.or);
                    notes[i].picture=$("#"+i+"_picture").val();
                },  
                complete:function(){
                    
                },
                error: function(data, status, error) {
                    
                }
            });
        }

       

        reader.readAsDataURL(file);
    }

    function preRequest() {
        return {
            notes:notes
        }
    }
</script>
{% endblock javascripts %}
